import { Controller, Get, Post, Body, Patch, Param, Res,Delete, UseGuards, UnauthorizedException, UseInterceptors, UploadedFile,  HttpStatus, BadRequestException, InternalServerErrorException, UploadedFiles, Req, ParseFilePipe, ParseFilePipeBuilder,  } from '@nestjs/common';
import { DealerProductsService } from './dealer_products.service';
import { CreateDealerProductDto } from '../../../dtos/create-dealer_product.dto';
import { UpdateDealerProductDto } from '../../../dtos/update-dealer_product.dto';
import { jwtGuard } from 'src/Guards/jwt-auth.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { Role } from '../../../enum/role.enum';
import { RolesGuard } from 'src/Guards/roles.guard';
import { CreateCategoryDto } from '../../../dtos/create-category.dto';
import { UpdateCategoryDto } from 'src/dtos/update-category.dto';
import { CategoryService } from '../category/category.service';
import { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';
import {  extname } from 'path';
import { Request, Response } from 'express';
import { error } from 'console';
import * as multer from 'multer';
import * as fs from 'fs-extra'
import getVideoDurationInSeconds from 'get-video-duration';
@UseGuards(jwtGuard,RolesGuard)
@Roles(Role.ADMIN,Role.EMPLOYEE)
@Controller()
export class DealerProductsController {
  constructor(private readonly dealerProductsService : DealerProductsService,
    private readonly categoryService : CategoryService
    ) {}
    
    private generateRandomFilename(): string {
      const randomname =Array(10)
         .fill(null)
         .map(() => Math.round(Math.random() * 16).toString(16))
         .join('');
         return randomname;
     }
    @Post('create')
    async create(
      @Body() createDealerProductDto: CreateDealerProductDto,
      @Body() createCategoryDto: CreateCategoryDto,
      @Req() req: any,
      @Res() res: Response,
      @UploadedFile()file:Express.Multer.File
    ){

      const maximgsize = 2000000;
      const maxvdosize = 20000000;
      const maxSec = 30;
       
      

      createDealerProductDto.dealer = req.user.dealerid;
      const images = req.files['images'];
      const video  = req.files['shorts'];
      const imgext = extname(images.originalFilename);
      const imgname = `${this.generateRandomFilename()}${imgext}`;
      const vdoext = extname(video.originalFilename);
      const vdoname =`${this.generateRandomFilename()}${vdoext}`;    
      const imgDir =images.path;
      const vdoDir = video.path;   
      
     getVideoDurationInSeconds(video.path).then((duration) => {
        return duration;
      }).catch(err =>{});

        if(!['image/jpeg','image/png'].includes(images.type))
        {
          throw new BadRequestException('Invalid file type for image upload. Only JPEG and PNG images are allowed.');
        }
          if(!['video/mp4','video/quicktime'].includes(video.type))
          {
            throw new BadRequestException('Invalid file type for video upload. Only mp4 and quicktime videos are allowed.');
          }
         
          if (images.size > maximgsize ) {
            throw new BadRequestException('image size exceeds the specified limit insert image less then 2mb ');
          }

          if (video.size > maxvdosize ) {
            throw new BadRequestException('video size exceeds the specified limit insert video less then 10mb ');
          }
          
          const duration = await getVideoDurationInSeconds(video.path);
 
          if(duration > maxSec){
            throw new BadRequestException('video duration exceeds the maximum limit upload upto 30sec');
          }

          const destinationimgDir = `/home/aiimtech05/projects/officework-multiauth/officework/assets/images/${imgname}`;
          fs.move(imgDir, destinationimgDir, { overwrite: true }, err => {
            if (err) return console.error(err)
            console.log('success!')
          });

          createDealerProductDto.images = destinationimgDir;   
          const destinationvdoDir = `//home/aiimtech05/projects/officework-multiauth/officework/assets/shorts/${vdoname}`
          fs.move(vdoDir, destinationvdoDir, { overwrite: true }, err => {
            if (err) return console.error(err)
            console.log('success!')
          });

          createDealerProductDto.shorts = destinationvdoDir;    
     
      const item = await this.dealerProductsService.create(createDealerProductDto);
      const category = await this.dealerProductsService.createCategory(item.id, createCategoryDto);
      
      if (item && category) {
        return res.status(HttpStatus.OK).json({ message: 'Records added successfully' });
      } else if (item || category) {
        return res.status(HttpStatus.BAD_REQUEST).json({ message: 'Item or category' });
      } else {
        throw new BadRequestException('No results found');
      }
    
          }
  @Get()
  async findAll(@Req() req) {
    const id = req.user.dealerid;
    return this.dealerProductsService.findAll(id);
  }

  @Get(':id')

  async findOne(@Param('id') id: number,@Req()req) {
    const dealerid = req.user.dealerid;
    return this.dealerProductsService.findOne(id,dealerid);  
  }


  @Patch(':id/')
  async update(@Param('id') id: number,@Res() res:Response, @Body() updateDealerProductDto: UpdateDealerProductDto,@Body()  updateCategoryDto:UpdateCategoryDto) {
  const item =await this.dealerProductsService.update(+id, updateDealerProductDto);
  const category_id = item.categoryid;
  const category =  this.categoryService.update(category_id,updateCategoryDto)
  try{
  if(item && category){
    return res.status(HttpStatus.OK).json({item});
  }
  else{
    throw new InternalServerErrorException();
  }
  }
  catch(error){
    throw new UnauthorizedException();
  }

  }

  @Delete(':id')
  async remove(@Param('id') id: number,@Res() res:Response) {
    const item = await this.dealerProductsService.remove(+id);
    const c_id = item.categoryid;
    const category = await this.dealerProductsService.Categoryremove(c_id)
    try{
    if(item && category ){
      res.status(HttpStatus.OK).json({message:"item and category deleted successfully"})

    }
    else{
      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({messsage:"item or category missing"})
      
    }
  }
  catch(error){
      throw new UnauthorizedException();
  }
  }

}

